package com.crowdar;

import com.crowdar.models.Flow;

import com.crowdar.tools.CodeGenerator;
import com.crowdar.tools.FlowParser;

import io.modelcontextprotocol.server.McpServer;
import io.modelcontextprotocol.server.McpServerFeatures;
import io.modelcontextprotocol.server.McpSyncServerExchange;
import io.modelcontextprotocol.server.transport.StdioServerTransportProvider;
import io.modelcontextprotocol.spec.McpSchema;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;

import java.nio.charset.StandardCharsets;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class McpServerApplication {
    private static final Logger log = LoggerFactory.getLogger(McpServerApplication.class);

    public static void main(String[] args) {
        var transportProvider = new StdioServerTransportProvider();
        var syncToolSpecification = getSyncCreateTestToolSpecification();
        var syncExecutionToolSpecification = getSyncExecutionToolSpecification();
        var syncReportingToolSpecification = getSyncReportingToolSpecification();

        McpServer.sync(transportProvider)
                .serverInfo("lippia-mcp-server", "1.0")
                .capabilities(McpSchema.ServerCapabilities.builder()
                        .tools(true)
                        .logging()
                        .build())
                .tools(
                        syncToolSpecification,
                        syncExecutionToolSpecification,
                        syncReportingToolSpecification)
                .build();

        log.info("Lippia MCP Server initialized!");
    }

    private static String loadSchemaFromResource(final String path) {
        try (InputStream input = McpServerApplication.class.getClassLoader().getResourceAsStream(path)) {
            if (input != null) {
                return new String(input.readAllBytes(), StandardCharsets.UTF_8);
            }

            throw new IOException("Resource not found: " + path);
        } catch (IOException e) {
            throw new RuntimeException("Unable to load JsonSchema: " + path, e);
        }
    }

    private static McpServerFeatures.SyncToolSpecification getSyncCreateTestToolSpecification() {
        String schema = loadSchemaFromResource("schemas/flow.json");

        return new McpServerFeatures.SyncToolSpecification(
                new McpSchema.Tool("create_test", "generates test/s from previous navigation with the selenium-mcp-server", schema),
                (McpSyncServerExchange exchange, Map<String, Object> arguments) -> {
                    List<McpSchema.Content> contents = new LinkedList<>();
                    List<Flow> flows = FlowParser.parse(arguments);

                    for (Flow flow : flows) {
                        String code = CodeGenerator.fromFlow(flow)
                                .orElseThrow(() -> new RuntimeException("Failed to generate code for flow: " + flow));
                        contents.add(new McpSchema.TextContent(code));
                    }

                    return new McpSchema.CallToolResult(contents, false);
                }
        );
    }

    private static McpServerFeatures.SyncToolSpecification getSyncExecutionToolSpecification() {
        String schema = loadSchemaFromResource("schemas/execute.json");

        return new McpServerFeatures.SyncToolSpecification(
                new McpSchema.Tool("execute_test", "executes the test/s by tag", schema),
                (McpSyncServerExchange exchange, Map<String, Object> arguments) -> {
                    log.info("Executing tests with arguments: {}", arguments);
                    String tag = arguments.get("tag").toString();
                    String command = String.format("""
                Please run the following command in the terminal:

                ```bash
                mvn clean test -D"cucumber.tags=@%s"
                ```
                """, tag);
                    McpSchema.Content content = new McpSchema.TextContent(command);
                    return new McpSchema.CallToolResult(List.of(content), false);
                }
        );
    }

    private static McpServerFeatures.SyncToolSpecification getSyncReportingToolSpecification() {
        String schema = loadSchemaFromResource("schemas/reporting.json");

        return new McpServerFeatures.SyncToolSpecification(
                new McpSchema.Tool("get_report", "It returns the report path generated by the test suite execution", schema),
                (McpSyncServerExchange exchange, Map<String, Object> arguments) -> {
                    log.info("Getting report with arguments: {}", arguments);
                    String file = arguments.get("file").toString();
                    String command = String.format("""
                Please open the following file with chrome or firefox:

                ```bash
                <current_working_dir>/target/reports/%s"
                ```
                """, file);
                    McpSchema.Content content = new McpSchema.TextContent(command);
                    return new McpSchema.CallToolResult(List.of(content), false);
                }
        );
    }
}
